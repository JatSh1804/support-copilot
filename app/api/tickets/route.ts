import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@/lib/supabase/server';
import { z } from 'zod';

// Validation schema for ticket submission
const createTicketSchema = z.object({
  name: z.string().min(1, 'Name is required').max(255),
  email: z.string().email('Valid email is required').max(255),
  subject: z.string().min(1, 'Subject is required').max(500),
  description: z.string().min(10, 'Description must be at least 10 characters'),
});

export async function POST(request: NextRequest) {
  try {
    const supabase = await createClient();
    const body = await request.json();

    // Validate input
    const validatedData = createTicketSchema.parse(body);

    // Insert ticket into database
    const { data: ticket, error: ticketError } = await supabase
      .from('tickets')
      .insert({
        name: validatedData.name,
        email: validatedData.email,
        subject: validatedData.subject,
        description: validatedData.description,
        status: 'pending'
        // ticket_number will be auto-generated by the trigger
      })
      .select('id, ticket_number')
      .single();

    if (ticketError) {
      console.error('Error creating ticket:', ticketError);
      return NextResponse.json(
        { error: 'Failed to create ticket' },
        { status: 500 }
      );
    }

    // Add initial customer message to responses
    const { error: responseError } = await supabase
      .from('ticket_responses')
      .insert({
        ticket_id: ticket.id,
        author_name: validatedData.name,
        author_email: validatedData.email,
        response_type: 'customer',
        content: validatedData.description
      });

    if (responseError) {
      console.error('Error creating initial response:', responseError);
      // Continue anyway as ticket is created
    }

    // Note: Ticket will be automatically added to embeddings queue via database trigger

    // Get tracking token for customer
    const { data: trackingData, error: trackingError } = await supabase
      .from('ticket_tracking_tokens')
      .select('tracking_token')
      .eq('ticket_id', ticket.id)
      .single();

    return NextResponse.json({
      success: true,
      ticket: {
        id: ticket.id,
        ticketNumber: ticket.ticket_number,
        trackingToken: trackingData?.tracking_token,
        status: 'pending',
        message: 'Your ticket has been submitted successfully. You can track its progress using the ticket number.'
      }
    });

  } catch (error) {
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: 'Validation failed', details: error.errors },
        { status: 400 }
      );
    }

    console.error('Unexpected error:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

export async function GET(request: NextRequest) {
  try {
    const supabase = await createClient();
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    // Fetch all tickets with classification and assignment info
    const { data: tickets, error } = await supabase
      .from('tickets')
      .select(`
        id,
        ticket_number,
        name,
        email,
        subject,
        description,
        status,
        priority,
        topic_tags,
        sentiment,
        ai_priority,
        classification_confidence,
        created_at,
        updated_at,
        classification_completed_at,
        assigned_to,
        resolved_at
      `)
      .order('created_at', { ascending: false });

    if (error) {
      return NextResponse.json({ error: 'Failed to fetch tickets' }, { status: 500 });
    }

    return NextResponse.json({ tickets });

  } catch (error) {
    console.error('Unexpected error:', error);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
}